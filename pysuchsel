#!/usr/bin/python3
#	pysuchsel - Create Suchsel word puzzles from Python
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of pysuchsel.
#
#	pysuchsel is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pysuchsel is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import random
import sys
from FriendlyArgumentParser import FriendlyArgumentParser
from RandomDist import RandomDist
from Suchsel import Suchsel
from Alphabet import Alphabet

parser = FriendlyArgumentParser(description = "Suchsel word puzzle generator.")
parser.add_argument("-f", "--fill-rule", choices = [ "az" ], default = "az", help = "Fill empty spaces with letters from this alphabet. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("-d", "--fill-dist", choices = [ "uniform", "natlang-en", "natlang-de" ], default = "uniform", help = "Distribute empty spaces with this frequency distribution. I.e., does every letter occur with the same probability or is the frequency that is also commonly found in natural language used. Can be one of %(choices)s, defaults to %(default)s.")
parser.add_argument("-x", "--width", metavar = "width", type = int, default = 15, help = "Choose this width for the suchsel. Defaults to %(default)d spaces.")
parser.add_argument("-y", "--height", metavar = "height", type = int, default = 20, help = "Choose this height for the suchsel. Defaults to %(default)d spaces.")
parser.add_argument("-p", "--placement", choices = [ "lr", "tb", "rl", "bt", "dbr", "dtr", "dbl", "dtl" ], action = "append", default = [ ], help = "Defines the placement rule of words within the suchsel. Can be specified multiple times and accepts %(choices)s as option. By default tb and lr is used (top -> bottom and left -> right). Choices beginning with 'd' mean diagonal (diagonal to bottom right/bottom left/top right/top left).")
parser.add_argument("-c", "--contiguous", action = "store_true", help = "Try to create a contiguous Suchsel, i.e., where some letters overlap.")
parser.add_argument("-m", "--mode", choices = [ "suchsel", "crossword" ], default = "suchsel", help = "Select the mode in which grids are generated. Can be one of %(choices)s, defaults to %(default)s. In crossword mode, contiguous placing is enforced and filling is not done by default.")
parser.add_argument("--place-attempts", metavar = "cnt", type = int, default = 500, help = "Placing words is non-deterministic. This increases the amounts of attempts for placing a word before giving up. Longer might yield better results, but also takes longer.")
parser.add_argument("-a", "--creation-attempts", metavar = "cnt", type = int, default = 1, help = "Sometimes, not all words can be placed. This gives the number of attempts that creation of the Suchsel/cross word puzzle is re-attempted before giving up.")
parser.add_argument("--empty", action = "store_true", help = "When creating SVGs, do not fill letters in. Useful for crossword mode.")
parser.add_argument("--nofill", action = "store_true", help = "For debugging, does not fill empty spaces with letters.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("infile", metavar = "infile", help = "Input filename that contains all words separated by newlines.")
parser.add_argument("outfile", metavar = "outfile", help = "Output SVG file to create.")
args = parser.parse_args(sys.argv[1:])

words = [ ]
with open(args.infile) as f:
	for line in f:
		line = line.strip(" \t\r\n")
		if line.startswith("#") or line == "":
			continue
		words.append(line.upper())
random.shuffle(words)

if len(args.placement) == 0:
	plcrule = RandomDist({
		"lr":	1,
		"tb":	1,
	})
else:
	plcrule = RandomDist({ name: 1 for name in args.placement })

for creation_attempt in range(args.creation_attempts):
	unplaced_words = [ ]
	placed_words = { }
	next_id = 1
	suchsel = Suchsel(args.width, args.height, plcrule, attempts = args.place_attempts)
	for word in words:
		if args.mode == "suchsel":
			placed = suchsel.place(word, contiguous = args.contiguous)
		elif args.mode == "crossword":
			placed = suchsel.place_crossword(word, crossword_marker = next_id)
			if placed:
				placed_words[next_id] = word
				next_id += 1
		else:
			raise NotImplementedError(args.mode)
		if not placed:
			unplaced_words.append(word)
	if len(unplaced_words) == 0:
		break

for unplaced_word in unplaced_words:
	print("Warning: could not place word \"%s\"." % (unplaced_word))

if args.mode == "crossword":
	for (word_id, word) in sorted(placed_words.items()):
		print("%2d: %s" % (word_id, word))

if args.verbose >= 1:
	suchsel.dump()

if (not args.nofill) and (args.mode == "suchsel"):
	filler = Alphabet(args.fill_rule, args.fill_dist)
	suchsel.fill(filler)
	if args.verbose >= 2:
		suchsel.dump()

suchsel.write_svg(args.outfile, place_letters = not args.empty)
